colnames(df_convolucion) <- columnas
# Indexar columna x
df_convolucion[["x"]] <- 0:n
# Ajustar p(x) (agregar cero al inicio)
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 8)
print(pepe)
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Indexar columna x
df_convolucion[["x"]] <- 0:n
# Ajustar p(x) (agregar cero al inicio)
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 20)
print(pepe)
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Llenar el dataframe
df_convolucion[["x"]] <- 0:n
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 20)
print(pepe)
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Llenar el dataframe
df_convolucion[["x"]] <- 0:n
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 6)
print(pepe)
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/I-2025/Modelos lineales y de sobrevivencia/Proyecto Modelos")
install.packages("scorecard")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(ggpubr)
library(stats)
library(gridExtra)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
#View(data_clean)
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
# Variables a transformar con WoE
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# 1. Crear los bins automáticamente
bins <- woebin(data = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Visualizar los bins creados para una variable, por ejemplo Age
bins$Age
# 3. Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
# 4. Visualizar las nuevas columnas _woe
head(datos_woe[, grep("_woe$", names(datos_woe))])
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# 1. Crear los bins automáticamente
bins <- woebin(data = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Visualizar los bins creados para una variable, por ejemplo Age
#bins$Age
# 3. Aplicar la transformación WoE al dataset original
#datos_woe <- woebin_ply(datos, bins)
# 4. Visualizar las nuevas columnas _woe
#head(datos_woe[, grep("_woe$", names(datos_woe))])
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# 1. Crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Visualizar los bins creados para una variable, por ejemplo Age
#bins$Age
# 3. Aplicar la transformación WoE al dataset original
#datos_woe <- woebin_ply(datos, bins)
# 4. Visualizar las nuevas columnas _woe
#head(datos_woe[, grep("_woe$", names(datos_woe))])
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Visualizar los bins creados para una variable, por ejemplo Age
bins$Age
# 3. Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
# 4. Visualizar las nuevas columnas _woe
#head(datos_woe[, grep("_woe$", names(datos_woe))])
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Visualizar los bins creados para una variable, por ejemplo Age
bins$Age
# 3. Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
# 4. Visualizar las nuevas columnas _woe
head(datos_woe[, grep("_woe$", names(datos_woe))])
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Visualizar los bins creados para una variable, por ejemplo Age
#bins$Age
# 3. Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
# 4. Visualizar las nuevas columnas _woe
head(datos_woe[, grep("_woe$", names(datos_woe))])
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Visualizar los bins creados para una variable, por ejemplo Age
#bins$Age
# 3. Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
# 4. Visualizar las nuevas columnas _woe
print(head(datos_woe[, grep("_woe$", names(datos_woe))]))
datos
datos_woe
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
#Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
datos_woe
# Variables continuas
vars_continuas <- c("Age", "Platelet Count", "WBC Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
#Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
print(datos_woe)
datos_woe
# Variables continuas
vars_continuas <- c("Age","Haemoglobin", "Platelet Count", "WBC Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
#Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
datos_woe
datos_woe
datos_woe
View(datos_woe)
bins$`WBC Count`
# Note que WBC Count están dando todos 0, lo que es extraño
bins$`WBC Count`
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + Platelet Count_woe + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL` + Age,
data = datos_woe,
family = binomial)
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + `Platelet Count_woe` + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL` + Age,
data = datos_woe,
family = binomial)
# Variables continuas
vars_continuas <- c("Age","Haemoglobin", "Platelet Count", "PDW")
# Esta función puede crear los bins automáticamente
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
#Aplicar la transformación WoE al dataset original
datos_woe <- woebin_ply(datos, bins)
datos_woe
#View(datos_woe)
# Note que WBC Count están dando todos 0, lo que es extraño
bins$`WBC Count`
datos_woe
#View(datos_woe)
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + `Platelet Count_woe` + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL` + Age,
data = datos_woe,
family = binomial)
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + `Platelet Count_woe` + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + `Platelet Count_woe` + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + `Platelet Count_woe` + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + `Platelet Count_woe` + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_prueba)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
#View(data_clean)
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
# Variables continuas para WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW")
# 1. Crear los bins
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Aplicar la transformación, SIN sobrescribir 'datos'
datos_woe <- woebin_ply(dt = datos, bins = bins)
# 3. Visualizar columnas añadidas (terminan en _woe)
names(datos_woe)[grep("_woe$", names(datos_woe))]
modelo_logit_prueba <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin + `Platelet Count` + `WBC Count` + PDW_woe + `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
datos_woe
#View(datos_woe)
datos_woe
View(datos_woe)
library(scorecard)
# Variables continuas para transformar con WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW")
# 1. Crear los bins WoE
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Aplicar la transformación WoE y extraer solo las columnas transformadas
woe_transformado <- woebin_ply(dt = datos, bins = bins)
woe_solo <- woe_transformado[ , grep("_woe$", names(woe_transformado))]
# 3. Unir el dataset original con las nuevas columnas _woe
datos_woe <- cbind(datos, woe_solo)
library(scorecard)
# Variables continuas para transformar con WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW", "WBC Count")
# 1. Crear los bins WoE
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Aplicar WoE a una copia y mantener el orden original
woe_transformado <- woebin_ply(dt = datos, bins = bins)
# 3. Asegurarse de que las filas coincidan (por seguridad, usar bind_cols del paquete dplyr)
library(dplyr)
# Extraer solo columnas _woe
woe_solo <- select(woe_transformado, ends_with("_woe"))
# Unir sin perder filas ni columnas
datos_woe <- bind_cols(datos, woe_solo)
datos_woe
View(datos_woe)
# Ajustar modelo logístico completo
modelo_logit_completo <- glm(`Dengue Diagnosis` ~ Age_woe + Haemoglobin_woe + `Platelet Count_woe` +
PDW_woe + `WBC Count` + Sex + `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
# Resumen del modelo
summary(modelo_logit_completo )
# Asegurar que las variables categóricas están como factores
datos_woe$Sex <- as.factor(datos_woe$Sex)
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
Sex +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_completo)
# Calcular el BIC
BIC(modelo_completo)
summary(modelo_completo)
# Asegurar que las variables categóricas están como factores
datos_woe$Sex <- as.factor(datos_woe$Sex)
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
Sex +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Calcular el BIC
#BIC(modelo_completo)
# Eliminar filas con NA en las variables del modelo... asumiendo que eliminar sea la solución
data_clean <- na.omit(datos[, c("Dengue Diagnosis", "Haemoglobin", "Platelet Count", "PDW", "Differential Count", "RBC PANEL")]) #, "Age"
# Ajustar el modelo completo con los datos ya limpios
modelo_completo <- glm(`Dengue Diagnosis` ~ Haemoglobin + `Platelet Count` + PDW + `Differential Count` + `RBC PANEL`, #+ Age
family = binomial,
data = data_clean)
# Aplicar selección automática
modelo_step <- step(modelo_completo, direction = "both")
# Ver resumen del modelo final
summary(modelo_logit_completo)
# Eliminar filas con NA en las variables del modelo... asumiendo que eliminar sea la solución
data_clean <- na.omit(datos[, c("Dengue Diagnosis", "Haemoglobin", "Platelet Count", "PDW", "Differential Count", "RBC PANEL")]) #, "Age"
# Ajustar el modelo completo con los datos ya limpios
modelo_completo <- glm(`Dengue Diagnosis` ~ Haemoglobin + `Platelet Count` + PDW + `Differential Count` + `RBC PANEL`, #+ Age
family = binomial,
data = data_clean)
# Aplicar selección automática
modelo_step <- step(modelo_completo, direction = "both")
# Ver resumen del modelo final
summary(modelo_step)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
#PDW +
`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Eliminar filas con NA en las variables del modelo... asumiendo que eliminar sea la solución
data_clean <- na.omit(datos[, c("Dengue Diagnosis", "Haemoglobin", "Platelet Count", "PDW", "Differential Count", "RBC PANEL")]) #, "Age"
# Ajustar el modelo completo con los datos ya limpios
modelo_completo <- glm(`Dengue Diagnosis` ~ Haemoglobin + `Platelet Count` + PDW + `Differential Count` + `RBC PANEL`, #+ Age
family = binomial,
data = data_clean)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar nuevamente el modelo sin NA
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Ver el modelo final
summary(modelo_step)
# BIC del modelo final después de step()
BIC(modelo_step)
# Número de observaciones del modelo
n_obs <- nrow(model.frame(modelo_logit_sin_woe))
# Búsqueda de modelo óptimo usando BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(n_obs))
# Ver resumen del modelo final por BIC
summary(modelo_step_bic)
# Confirmar el BIC del modelo final
BIC(modelo_step_bic)
model_logit_ final <- glm(formula = `Dengue Diagnosis` ~ Age_woe + `Platelet Count` +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe + `Platelet Count` +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe + `Platelet Count` +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
