metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Indexar columna x
df_convolucion[["x"]] <- 0:n
# Ajustar p(x) (agregar cero al inicio)
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 5)
print(pepe)
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Indexar columna x
df_convolucion[["x"]] <- 0:n
# Ajustar p(x) (agregar cero al inicio)
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 8)
print(pepe)
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Indexar columna x
df_convolucion[["x"]] <- 0:n
# Ajustar p(x) (agregar cero al inicio)
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 20)
print(pepe)
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Llenar el dataframe
df_convolucion[["x"]] <- 0:n
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 20)
print(pepe)
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Llenar el dataframe
df_convolucion[["x"]] <- 0:n
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 6)
print(pepe)
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/I-2025/Modelos lineales y de sobrevivencia/Proyecto Modelos")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
data_clean <- data_raw
names(data_clean)[9] <- "Dengue Diagnosis"
#View(data_clean)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(data_clean)[9] <- "Dengue Diagnosis"
#View(data_clean)
# Separar variables numéricas y categóricas (excepto la variable respuesta)
variables_numericas <- datos %>%
select_if(is.numeric) %>%
select(-`Dengue Diagnosis`) %>%
colnames()
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
# Cargar paquetes necesarios
library(dplyr)
library(ggpubr)
library(stats)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
#View(data_clean)
# Separar variables numéricas y categóricas (excepto la variable respuesta)
variables_numericas <- datos %>%
select_if(is.numeric) %>%
select(-`Dengue Diagnosis`) %>%
colnames()
variables_categoricas <- datos %>%
select_if(is.factor) %>%
colnames()
# Asegurarse que la variable respuesta sea factor
datos$`Dengue Diagnosis` <- as.factor(datos$`Dengue Diagnosis`)
# ---------------------
# Análisis de variables numéricas
# ---------------------
resultados_numericas <- lapply(variables_numericas, function(var) {
grupo1 <- datos %>% filter(`Dengue Diagnosis` == 0) %>% pull(!!sym(var))
grupo2 <- datos %>% filter(`Dengue Diagnosis` == 1) %>% pull(!!sym(var))
prueba_normalidad_1 <- shapiro.test(grupo1)
prueba_normalidad_2 <- shapiro.test(grupo2)
if (prueba_normalidad_1$p.value > 0.05 && prueba_normalidad_2$p.value > 0.05) {
prueba <- t.test(grupo1, grupo2, var.equal = FALSE)
metodo <- "t-test"
} else {
prueba <- wilcox.test(grupo1, grupo2)
metodo <- "Mann-Whitney"
}
tibble(
Variable = var,
Metodo = metodo,
p_valor = prueba$p.value,
Grupo1_Media = mean(grupo1, na.rm = TRUE),
Grupo2_Media = mean(grupo2, na.rm = TRUE)
)
}) %>% bind_rows()
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
# Cargar paquetes necesarios
library(dplyr)
library(ggpubr)
library(stats)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
# Asegurarse de que la variable de grupo sea factor
datos$`Dengue Diagnosis` <- as.factor(datos$`Dengue Diagnosis`)
# Variables numéricas a comparar
variables_numericas <- c("Hemoglobin", "WBC Count", "Platelet Count", "PDW")
# Inicializar lista para resultados y gráficos
resultados <- list()
graficos <- list()
# Función para analizar cada variable
for (var in variables_numericas) {
grupo0 <- datos %>% filter(`Dengue Diagnosis` == 0) %>% pull(!!sym(var))
grupo1 <- datos %>% filter(`Dengue Diagnosis` == 1) %>% pull(!!sym(var))
# Pruebas de normalidad
norm_0 <- shapiro.test(grupo0)
norm_1 <- shapiro.test(grupo1)
# Decidir qué prueba usar
if (norm_0$p.value > 0.05 && norm_1$p.value > 0.05) {
prueba <- t.test(grupo0, grupo1, var.equal = FALSE)
metodo <- "t-test (medias)"
} else {
prueba <- wilcox.test(grupo0, grupo1)
metodo <- "Mann-Whitney (medianas)"
}
# Guardar resultado
resultados[[var]] <- data.frame(
Variable = var,
Metodo = metodo,
p_valor = round(prueba$p.value, 4),
Grupo0_Media = mean(grupo0, na.rm = TRUE),
Grupo1_Media = mean(grupo1, na.rm = TRUE)
)
# Crear gráfico tipo boxplot con p-valor
g <- ggboxplot(
datos, x = "Dengue Diagnosis", y = var,
color = "Dengue Diagnosis", palette = "jco",
add = "jitter"
) +
stat_compare_means(method = ifelse(metodo == "t-test (medias)", "t.test", "wilcox.test"),
label = "p.format") +
labs(title = paste("Comparación de", var),
subtitle = paste("Método:", metodo),
x = "Diagnóstico de Dengue", y = var)
graficos[[var]] <- g
}
names(datos)
# Asegurarse de que la variable de grupo sea factor
datos$`Dengue Diagnosis` <- as.factor(datos$`Dengue Diagnosis`)
# Variables numéricas a comparar
variables_numericas <- c("Haemoglobin", "WBC Count", "Platelet Count", "PDW")
# Inicializar lista para resultados y gráficos
resultados <- list()
graficos <- list()
names(datos)
# Función para analizar cada variable
for (var in variables_numericas) {
grupo0 <- datos %>% filter(`Dengue Diagnosis` == 0) %>% pull(!!sym(var))
grupo1 <- datos %>% filter(`Dengue Diagnosis` == 1) %>% pull(!!sym(var))
# Pruebas de normalidad
norm_0 <- shapiro.test(grupo0)
norm_1 <- shapiro.test(grupo1)
# Decidir qué prueba usar
if (norm_0$p.value > 0.05 && norm_1$p.value > 0.05) {
prueba <- t.test(grupo0, grupo1, var.equal = FALSE)
metodo <- "t-test (medias)"
} else {
prueba <- wilcox.test(grupo0, grupo1)
metodo <- "Mann-Whitney (medianas)"
}
# Guardar resultado
resultados[[var]] <- data.frame(
Variable = var,
Metodo = metodo,
p_valor = round(prueba$p.value, 4),
Grupo0_Media = mean(grupo0, na.rm = TRUE),
Grupo1_Media = mean(grupo1, na.rm = TRUE)
)
# Crear gráfico tipo boxplot con p-valor
g <- ggboxplot(
datos, x = "Dengue Diagnosis", y = var,
color = "Dengue Diagnosis", palette = "jco",
add = "jitter"
) +
stat_compare_means(method = ifelse(metodo == "t-test (medias)", "t.test", "wilcox.test"),
label = "p.format") +
labs(title = paste("Comparación de", var),
subtitle = paste("Método:", metodo),
x = "Diagnóstico de Dengue", y = var)
graficos[[var]] <- g
}
# Mostrar resultados
df_resultados <- do.call(rbind, resultados)
print(df_resultados)
# Mostrar gráficos (2 por fila)
grid.arrange(grobs = graficos, ncol = 2)
install.packages("gridExtra")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
# Cargar paquetes necesarios
library(dplyr)
library(ggpubr)
library(stats)
library(gridExtra)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
#View(data_clean)
# Asegurarse de que la variable de grupo sea factor
datos$`Dengue Diagnosis` <- as.factor(datos$`Dengue Diagnosis`)
# Variables numéricas a comparar
variables_numericas <- c("Haemoglobin", "WBC Count", "Platelet Count", "PDW")
# Inicializar lista para resultados y gráficos
resultados <- list()
graficos <- list()
names(datos)
# Función para analizar cada variable
for (var in variables_numericas) {
grupo0 <- datos %>% filter(`Dengue Diagnosis` == 0) %>% pull(!!sym(var))
grupo1 <- datos %>% filter(`Dengue Diagnosis` == 1) %>% pull(!!sym(var))
# Pruebas de normalidad
norm_0 <- shapiro.test(grupo0)
norm_1 <- shapiro.test(grupo1)
# Decidir qué prueba usar
if (norm_0$p.value > 0.05 && norm_1$p.value > 0.05) {
prueba <- t.test(grupo0, grupo1, var.equal = FALSE)
metodo <- "t-test (medias)"
} else {
prueba <- wilcox.test(grupo0, grupo1)
metodo <- "Mann-Whitney (medianas)"
}
# Guardar resultado
resultados[[var]] <- data.frame(
Variable = var,
Metodo = metodo,
p_valor = round(prueba$p.value, 4),
Grupo0_Media = mean(grupo0, na.rm = TRUE),
Grupo1_Media = mean(grupo1, na.rm = TRUE)
)
# Crear gráfico tipo boxplot con p-valor
g <- ggboxplot(
datos, x = "Dengue Diagnosis", y = var,
color = "Dengue Diagnosis", palette = "jco",
add = "jitter"
) +
stat_compare_means(method = ifelse(metodo == "t-test (medias)", "t.test", "wilcox.test"),
label = "p.format") +
labs(title = paste("Comparación de", var),
subtitle = paste("Método:", metodo),
x = "Diagnóstico de Dengue", y = var)
graficos[[var]] <- g
}
# Mostrar resultados
df_resultados <- do.call(rbind, resultados)
print(df_resultados)
# Mostrar gráficos (2 por fila)
grid.arrange(grobs = graficos, ncol = 2)
# Función para analizar cada variable
for (var in variables_numericas) {
grupo0 <- datos %>% filter(`Dengue Diagnosis` == 0) %>% pull(!!sym(var))
grupo1 <- datos %>% filter(`Dengue Diagnosis` == 1) %>% pull(!!sym(var))
# Pruebas de normalidad
norm_0 <- shapiro.test(grupo0)
norm_1 <- shapiro.test(grupo1)
# Decidir qué prueba usar
if (norm_0$p.value > 0.05 && norm_1$p.value > 0.05) {
prueba <- t.test(grupo0, grupo1, var.equal = FALSE)
metodo <- "t-test (medias)"
} else {
prueba <- wilcox.test(grupo0, grupo1)
metodo <- "Mann-Whitney (medianas)"
}
# Guardar resultado
resultados[[var]] <- data.frame(
Variable = var,
Metodo = metodo,
p_valor = round(prueba$p.value, 4),
Grupo0_Media = mean(grupo0, na.rm = TRUE),
Grupo1_Media = mean(grupo1, na.rm = TRUE)
)
# Crear gráfico tipo boxplot con p-valor
g <- ggboxplot(
datos, x = "Dengue Diagnosis", y = var,
color = "Dengue Diagnosis", palette = "jco",
add = "jitter"
) +
stat_compare_means(method = ifelse(metodo == "t-test (medias)", "t.test", "wilcox.test"),
label = "p.format") +
labs(title = paste("Comparación de", var),
subtitle = paste("Método:", metodo),
x = "Diagnóstico de Dengue", y = var)
graficos[[var]] <- g
print(p_valor)
}
# Función para analizar cada variable
for (var in variables_numericas) {
grupo0 <- datos %>% filter(`Dengue Diagnosis` == 0) %>% pull(!!sym(var))
grupo1 <- datos %>% filter(`Dengue Diagnosis` == 1) %>% pull(!!sym(var))
# Pruebas de normalidad
norm_0 <- shapiro.test(grupo0)
norm_1 <- shapiro.test(grupo1)
# Decidir qué prueba usar
if (norm_0$p.value > 0.05 && norm_1$p.value > 0.05) {
prueba <- t.test(grupo0, grupo1, var.equal = FALSE)
metodo <- "t-test (medias)"
} else {
prueba <- wilcox.test(grupo0, grupo1)
metodo <- "Mann-Whitney (medianas)"
}
# Guardar resultado
resultados[[var]] <- data.frame(
Variable = var,
Metodo = metodo,
p_valor = round(prueba$p.value, 4),
Grupo0_Media = mean(grupo0, na.rm = TRUE),
Grupo1_Media = mean(grupo1, na.rm = TRUE)
)
# Crear gráfico tipo boxplot con p-valor
g <- ggboxplot(
datos, x = "Dengue Diagnosis", y = var,
color = "Dengue Diagnosis", palette = "jco",
add = "jitter"
) +
stat_compare_means(method = ifelse(metodo == "t-test (medias)", "t.test", "wilcox.test"),
label = "p.format") +
labs(title = paste("Comparación de", var),
subtitle = paste("Método:", metodo),
x = "Diagnóstico de Dengue", y = var)
graficos[[var]] <- g
print(round(prueba$p.value, 4))
}
# Función para analizar cada variable
for (var in variables_numericas) {
grupo0 <- datos %>% filter(`Dengue Diagnosis` == 0) %>% pull(!!sym(var))
grupo1 <- datos %>% filter(`Dengue Diagnosis` == 1) %>% pull(!!sym(var))
# Pruebas de normalidad
norm_0 <- shapiro.test(grupo0)
norm_1 <- shapiro.test(grupo1)
# Decidir qué prueba usar
if (norm_0$p.value > 0.05 && norm_1$p.value > 0.05) {
prueba <- t.test(grupo0, grupo1, var.equal = FALSE)
metodo <- "t-test (medias)"
} else {
prueba <- wilcox.test(grupo0, grupo1)
metodo <- "Mann-Whitney (medianas)"
}
# Guardar resultado
resultados[[var]] <- data.frame(
Variable = var,
Metodo = metodo,
p_valor = round(prueba$p.value, 4),
Grupo0_Media = mean(grupo0, na.rm = TRUE),
Grupo1_Media = mean(grupo1, na.rm = TRUE)
)
graficos[[var]] <- g
print(round(prueba$p.value, 4))
}
# Mostrar resultados
df_resultados <- do.call(rbind, resultados)
print(df_resultados)
