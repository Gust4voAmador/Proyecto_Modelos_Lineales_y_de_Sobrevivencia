auc_test <- roc(response = datos_test$DengueFactor, predictor = pred_test$Sí, levels = c("No", "Sí"))$auc
# Guardar resultados
resultados <- rbind(resultados,
data.frame(TamanoEntrenamiento = round(p * 100), AUC_Test = auc_test))
cat("Entrenamiento con", round(p * 100), "% de datos: AUC =", round(auc_test, 3), "\n")
}
# Mostrar tabla final
print(resultados)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
#View(data_clean)
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
# Variables continuas para transformar con WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW", "WBC Count")
# Crear los bins WoE
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# Aplicar WoE a una copia
woe_transformado <- woebin_ply(dt = datos, bins = bins)
# Extraer solo columnas _woe
woe_solo <- select(woe_transformado, ends_with("_woe"))
# Unir sin perder
datos_woe <- bind_cols(datos, woe_solo)
datos_woe
#View(datos_woe)
print(sum(datos$`Dengue Diagnosis` == 1))
print(sum(datos$`Dengue Diagnosis` == 0))
# Asegurar que las variables categóricas están como factores
datos_woe$Sex <- as.factor(datos_woe$Sex)
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
Sex +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Calcular el BIC
#BIC(modelo_completo)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar nuevamente el modelo sin NA
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Ver el modelo final
summary(modelo_step)
# Número de observaciones del modelo
n_obs <- nrow(model.frame(modelo_logit_sin_woe))
# Búsqueda de modelo óptimo usando BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(n_obs))
# Ver resumen del modelo final por BIC
summary(modelo_step_bic)
# Confirmar el BIC del modelo final
BIC(modelo_step_bic)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
library(caret)
library(pROC)
set.seed(422)
# Asegurar que la variable objetivo es un factor con clases "Sí" y "No"
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("Sí", "No") # Importante: nivel positivo primero
)
# Proporciones del conjunto de entrenamiento a evaluar
train_props <- c(0.7, 0.5, 0.3, 0.1)
# Almacenar resultados
resultados <- data.frame()
for (p in train_props) {
# Partición estratificada
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = p, list = FALSE)
datos_train <- datos_modelo[idx_train, ]
datos_test <- datos_modelo[-idx_train, ]
# Configuración del entrenamiento con validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Modelo logístico
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = datos_train,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
# Predicciones en el conjunto de prueba externo
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
# AUC en test externo
auc_test <- roc(response = datos_test$DengueFactor, predictor = pred_test$Sí, levels = c("No", "Sí"))$auc
# Guardar resultados
resultados <- rbind(resultados,
data.frame(TamanoEntrenamiento = round(p * 100), AUC_Test = auc_test))
cat("Entrenamiento con", round(p * 100), "% de datos: AUC =", round(auc_test, 3), "\n")
}
# Mostrar tabla final
print(resultados)
remove.packages("caret")
remove.packages("pROC")
install.packages("caret")
install.packages("pROC")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
#View(data_clean)
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
# Variables continuas para transformar con WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW", "WBC Count")
# Crear los bins WoE
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# Aplicar WoE a una copia
woe_transformado <- woebin_ply(dt = datos, bins = bins)
# Extraer solo columnas _woe
woe_solo <- select(woe_transformado, ends_with("_woe"))
# Unir sin perder
datos_woe <- bind_cols(datos, woe_solo)
datos_woe
#View(datos_woe)
print(sum(datos$`Dengue Diagnosis` == 1))
print(sum(datos$`Dengue Diagnosis` == 0))
# Asegurar que las variables categóricas están como factores
datos_woe$Sex <- as.factor(datos_woe$Sex)
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
Sex +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Calcular el BIC
#BIC(modelo_completo)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar nuevamente el modelo sin NA
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Ver el modelo final
summary(modelo_step)
# Número de observaciones del modelo
n_obs <- nrow(model.frame(modelo_logit_sin_woe))
# Búsqueda de modelo óptimo usando BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(n_obs))
# Ver resumen del modelo final por BIC
summary(modelo_step_bic)
# Confirmar el BIC del modelo final
BIC(modelo_step_bic)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
library(caret)
library(pROC)
set.seed(187)
# Asegurar niveles correctos (No = 0, Sí = 1)
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Proporciones del conjunto de entrenamiento
train_props <- c(0.7, 0.5, 0.3, 0.1)
# Repeticiones por proporción
reps <- 10
# Control de entrenamiento con validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Inicializar resultados
resultados_estratificados <- data.frame()
for (p in train_props) {
for (i in 1:reps) {
# Partición estratificada (sin balanceo)
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = p, list = FALSE)
datos_train <- datos_modelo[idx_train, ]
datos_test <- datos_modelo[-idx_train, ]
# Entrenar el modelo directamente sobre el conjunto estratificado (no balanceado)
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = datos_train,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
# Predicciones en conjunto de prueba
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
# Calcular AUC en test
auc_test <- roc(response = datos_test$DengueFactor,
predictor = pred_test$Sí,
levels = c("No", "Sí"))$auc
# Guardar resultado
resultados_estratificados <- rbind(resultados_estratificados,
data.frame(TamanoEntrenamiento = round(p * 100),
Repeticion = i,
AUC_Test = auc_test))
cat("ENTRENAMIENTO estratificado con", round(p * 100), "% de datos | Repetición", i,
": AUC en TEST =", round(auc_test, 4), "\n")
}
}
# Mostrar tabla final
print(resultados_estratificados)
resumen_estratificados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_estratificados, FUN = mean)
print(resumen_estratificados)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
#View(data_clean)
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
# Variables continuas para transformar con WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW", "WBC Count")
# Crear los bins WoE
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# Aplicar WoE a una copia
woe_transformado <- woebin_ply(dt = datos, bins = bins)
# Extraer solo columnas _woe
woe_solo <- select(woe_transformado, ends_with("_woe"))
# Unir sin perder
datos_woe <- bind_cols(datos, woe_solo)
datos_woe
#View(datos_woe)
print(sum(datos$`Dengue Diagnosis` == 1))
print(sum(datos$`Dengue Diagnosis` == 0))
# Asegurar que las variables categóricas están como factores
datos_woe$Sex <- as.factor(datos_woe$Sex)
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
Sex +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Calcular el BIC
#BIC(modelo_completo)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar nuevamente el modelo sin NA
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Ver el modelo final
summary(modelo_step)
# Número de observaciones del modelo
n_obs <- nrow(model.frame(modelo_logit_sin_woe))
# Búsqueda de modelo óptimo usando BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(n_obs))
# Ver resumen del modelo final por BIC
summary(modelo_step_bic)
# Confirmar el BIC del modelo final
BIC(modelo_step_bic)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
library(caret)
library(pROC)
set.seed(187)
# Asegurar niveles correctos (No = 0, Sí = 1)
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Proporciones del conjunto de entrenamiento
train_props <- c(0.7, 0.5, 0.3, 0.1)
# Repeticiones por proporción
reps <- 10
# Control de entrenamiento con validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Inicializar resultados
resultados_estratificados <- data.frame()
for (p in train_props) {
for (i in 1:reps) {
# Partición estratificada (sin balanceo)
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = p, list = FALSE)
datos_train <- datos_modelo[idx_train, ]
datos_test <- datos_modelo[-idx_train, ]
# Entrenar el modelo directamente sobre el conjunto estratificado (no balanceado)
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = datos_train,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
# Predicciones en conjunto de prueba
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
# Calcular AUC en test
auc_test <- roc(response = datos_test$DengueFactor,
predictor = pred_test$Sí,
levels = c("No", "Sí"))$auc
# Guardar resultado
resultados_estratificados <- rbind(resultados_estratificados,
data.frame(TamanoEntrenamiento = round(p * 100),
Repeticion = i,
AUC_Test = auc_test))
cat("ENTRENAMIENTO estratificado con", round(p * 100), "% de datos | Repetición", i,
": AUC en TEST =", round(auc_test, 4), "\n")
}
}
# Mostrar tabla final
print(resultados_estratificados)
#resumen_estratificados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_estratificados, FUN = mean)
#print(resumen_estratificados)
library(caret)
library(pROC)
set.seed(187)
# Asegurar niveles correctos (No = 0, Sí = 1)
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Proporciones del conjunto de entrenamiento
train_props <- c(0.7, 0.5, 0.3, 0.1)
# Repeticiones por proporción
reps <- 10
# Control de entrenamiento con validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Inicializar resultados
resultados_estratificados <- data.frame()
for (p in train_props) {
for (i in 1:reps) {
# Partición estratificada (sin balanceo)
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = p, list = FALSE)
datos_train <- datos_modelo[idx_train, ]
datos_test <- datos_modelo[-idx_train, ]
# Entrenar el modelo directamente sobre el conjunto estratificado (no balanceado)
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = datos_train,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
# Predicciones en conjunto de prueba
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
# Calcular AUC en test
auc_test <- roc(response = datos_test$DengueFactor,
predictor = pred_test$Sí,
levels = c("No", "Sí"))$auc
# Guardar resultado
resultados_estratificados <- rbind(resultados_estratificados,
data.frame(TamanoEntrenamiento = round(p * 100),
Repeticion = i,
AUC_Test = auc_test))
cat("ENTRENAMIENTO estratificado con", round(p * 100), "% de datos | Repetición", i,
": AUC en TEST =", round(auc_test, 4), "\n")
}
}
# Mostrar tabla final
print(resultados_estratificados)
#resumen_estratificados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_estratificados, FUN = mean)
#print(resumen_estratificados)
