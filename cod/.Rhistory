group_by(`Dengue Diagnosis`) %>%
summarise(Frecuencia = n()) %>%
mutate(Proporcion = Frecuencia / sum(Frecuencia))
# Gráfico
ggplot(data_plot, aes(x = `Dengue Diagnosis`, y = Proporcion, fill = `Dengue Diagnosis`)) +
geom_col() +
geom_text(aes(label = paste0(Frecuencia, " obs")), vjust = -0.5) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1.1)) +
labs(
x = "Valor de Dengue Diagnosis",
y = "Proporción del total",
title = "Distribución de Dengue Diagnosis",
fill = "Valor"
) +
scale_fill_manual(values = c("0" = "gray70", "1" = "steelblue", "NA" = "darkred")) +
theme_minimal()
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
data_raw <- read_csv("Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
data_clean <- data_raw
names(data_clean)[9] <- "Dengue Diagnosis"
#View(data_clean)
#Hacer varibla que determina el dengue booleana
data_clean$`Dengue Diagnosis` <- as.logical(data_clean$`Dengue Diagnosis`)
# Filtrar solo las variables numéricas
datos_numericos <- data_clean %>%
select(where(is.numeric)) %>%
na.omit()  # eliminar NA para evitar errores en cor()
# Calcular matriz de correlación
cor_matrix <- cor(datos_numericos)
# Visualizar la matriz con ggcorrplot
ggcorrplot(cor_matrix,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 2.5,
colors = c("#6D9EC1", "white", "#E46726"),
title = "Matriz de correlación entre variables",
ggtheme = ggplot2::theme_minimal())
data_clean$`Dengue Diagnosis`
# Reemplazar NA por etiqueta explícita
data_plot <- data_clean %>%
mutate(`Dengue Diagnosis` = case_when(
is.na(`Dengue Diagnosis`) ~ "NA",
`Dengue Diagnosis` == 1 ~ "1",
`Dengue Diagnosis` == 0 ~ "0"
)) %>%
group_by(`Dengue Diagnosis`) %>%
summarise(Frecuencia = n()) %>%
mutate(Proporcion = Frecuencia / sum(Frecuencia))
# Gráfico
ggplot(data_plot, aes(x = `Dengue Diagnosis`, y = Proporcion, fill = `Dengue Diagnosis`)) +
geom_col() +
geom_text(aes(label = paste0(Frecuencia, " obs")), vjust = -0.5) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1.1)) +
labs(
x = "Valor de Dengue Diagnosis",
y = "Proporción del total",
title = "Distribución de Dengue Diagnosis",
fill = "Valor"
) +
scale_fill_manual(values = c("0" = "gray70", "1" = "steelblue", "NA" = "darkred")) +
theme_minimal()
# Preparar los datos
data_plot <- data_clean %>%
filter(!is.na(`Dengue Diagnosis`)) %>%
mutate(
`Differential Count` = factor(`Differential Count`, levels = c(0, 1)),
`Dengue Diagnosis` = ifelse(`Dengue Diagnosis` == 1, "Positive", "Negative")
)
# Gráfico
ggplot(data_plot, aes(x = `Differential Count`, fill = `Differential Count`)) +
geom_bar() +
facet_wrap(~`Dengue Diagnosis`) +
labs(
title = "Distribución de Differential Count según diagnóstico de dengue",
x = "Differential Count",
y = "Frecuencia"
) +
scale_fill_manual(values = c("0" = "gray70", "1" = "steelblue")) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Preparar los datos
data_plot <- data_clean %>%
filter(!is.na(`RBC PANEL`)) %>%
mutate(
`RBC PANEL` = factor(`RBC PANEL`, levels = c(0, 1)),
`Dengue Diagnosis` = ifelse(`Dengue Diagnosis` == 1, "Positive", "Negative")
)
# Gráfico
ggplot(data_plot, aes(x = `RBC PANEL`, fill = `RBC PANEL`)) +
geom_bar() +
facet_wrap(~`Dengue Diagnosis`) +
labs(
title = "Distribución de RBC PANEL según diagnóstico de dengue",
x = "RBC PANEL",
y = "Frecuencia"
) +
scale_fill_manual(values = c("0" = "gray70", "1" = "steelblue")) +
theme_minimal()
# Calcular resumen estadístico por grupo de diagnóstico
tabla_resumen <- data_clean %>%
group_by(`Dengue Diagnosis`) %>%
summarise(
Haemoglobin_mean = round(mean(Haemoglobin, na.rm = TRUE), 2),
Haemoglobin_sd = round(sd(Haemoglobin, na.rm = TRUE), 2),
Haemoglobin_median = round(median(Haemoglobin, na.rm = TRUE), 2)
)
# Mostrar tabla
print(tabla_resumen)
tabla_resumen <- data_clean %>%
group_by(`Dengue Diagnosis`) %>%
summarise(
WBC_Count_mean = round(mean(`WBC Count`, na.rm = TRUE), 2),
WBC_Count_sd = round(sd(`WBC Count`, na.rm = TRUE), 2),
WBC_Count_median = round(median(`WBC Count`, na.rm = TRUE), 2)
)
# Mostrar tabla
print(tabla_resumen)
tabla_resumen <- data_clean %>%
group_by(`Dengue Diagnosis`) %>%
summarise(
Platelet_Count_mean = round(mean(`Platelet Count`, na.rm = TRUE), 2),
Platelet_Count_sd = round(sd(`Platelet Count`, na.rm = TRUE), 2),
Platelet_Count_median = round(median(`Platelet Count`, na.rm = TRUE), 2)
)
# Mostrar tabla
print(tabla_resumen)
tabla_resumen <- data_clean %>%
group_by(`Dengue Diagnosis`) %>%
summarise(
PDW_mean = round(mean(PDW, na.rm = TRUE), 2),
PDW_sd = round(sd(PDW, na.rm = TRUE), 2),
PDW_median = round(median(PDW, na.rm = TRUE), 2)
)
# Mostrar tabla
print(tabla_resumen)
# Boxplot Haemoglobin
p1 <- ggplot(data_clean, aes(x = factor(`Dengue Diagnosis`), y = Haemoglobin)) +
geom_boxplot(fill = "#69b3a2") +
labs(title = "Haemoglobina por diagnóstico", x = "Diagnóstico de dengue", y = "g/dL") +
theme_minimal()
# Boxplot WBC Count
p2 <- ggplot(data_clean, aes(x = factor(`Dengue Diagnosis`), y = `WBC Count`)) +
geom_boxplot(fill = "#f9a825") +
labs(title = "Recuento de glóbulos blancos", x = "Diagnóstico de dengue", y = "células/µL") +
theme_minimal()
# Boxplot Platelet Count
p3 <- ggplot(data_clean, aes(x = factor(`Dengue Diagnosis`), y = `Platelet Count`)) +
geom_boxplot(fill = "#ef5350") +
labs(title = "Recuento de plaquetas", x = "Diagnóstico de dengue", y = "células/µL") +
theme_minimal()
# Boxplot PDW
p4 <- ggplot(data_clean, aes(x = factor(`Dengue Diagnosis`), y = PDW)) +
geom_boxplot(fill = "#B2FFFF") +
labs(title = "Amplitud de Distribución Plaquetaria", x = "Diagnóstico de dengue", y = "% de variabilidad en tamaño") +
theme_minimal()
# Mostrar juntos (si usás patchwork o gridExtra)
library(patchwork)
p1 + p2
p3 + p4
data_clean$`Dengue Diagnosis`
# Reemplazar NA por etiqueta explícita
data_plot <- data_clean %>%
mutate(`Dengue Diagnosis` = case_when(
is.na(`Dengue Diagnosis`) ~ "NA",
`Dengue Diagnosis` == 1 ~ "1",
`Dengue Diagnosis` == 0 ~ "0"
)) %>%
group_by(`Dengue Diagnosis`) %>%
summarise(Frecuencia = n()) %>%
mutate(Proporcion = Frecuencia / sum(Frecuencia))
# Gráfico
ggplot(data_plot, aes(x = `Dengue Diagnosis`, y = Proporcion, fill = `Dengue Diagnosis`)) +
geom_col() +
geom_text(aes(label = paste0(Frecuencia, " obs")), vjust = -0.5) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1.1)) +
labs(
x = "Valor de Dengue Diagnosis",
y = "Proporción del total",
title = "Distribución de Dengue Diagnosis",
fill = "Valor"
) +
scale_fill_manual(values = c("0" = "gray70", "1" = "steelblue", "NA" = "darkred")) +
theme_minimal()
knit_with_parameters("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/I-2025/Modelos lineales y de sobrevivencia/Proyecto Modelos/Análisis_exploratorio_2.Rmd")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(ggpubr)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(ggpubr)
install.packages(ggpubr)
install.packages("ggpubr")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(ggpubr)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(ggpubr)
install.packages("ggpubr")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(ggpubr)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
library(gridExtra)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
install.packages("pROC")
install.packages("gridExtra")
install.packages("caret")
install.packages("boot")
install.packages("scorecard")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
library(caret)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
#library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
#View(data_clean)
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
# Variables continuas para transformar con WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW", "WBC Count")
# 1. Crear los bins WoE
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Aplicar WoE a una copia y mantener el orden original
woe_transformado <- woebin_ply(dt = datos, bins = bins)
# Extraer solo columnas _woe
woe_solo <- select(woe_transformado, ends_with("_woe"))
# Unir sin perder filas ni columnas
datos_woe <- bind_cols(datos, woe_solo)
datos_woe
View(datos_woe)
# Asegurar que las variables categóricas están como factores
datos_woe$Sex <- as.factor(datos_woe$Sex)
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
Sex +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Calcular el BIC
#BIC(modelo_completo)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar nuevamente el modelo sin NA
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Ver el modelo final
summary(modelo_step)
# Número de observaciones del modelo
n_obs <- nrow(model.frame(modelo_logit_sin_woe))
# Búsqueda de modelo óptimo usando BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(n_obs))
# Ver resumen del modelo final por BIC
summary(modelo_step_bic)
# Confirmar el BIC del modelo final
BIC(modelo_step_bic)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
install.packages("caret")
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
library(caret)
install.packages("caret")
install.packages("caret", repos = "https://cloud.r-project.org")
library(caret)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
#library(ggpubr)
library(stats)
#library(gridExtra)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
#View(data_clean)
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
# Variables continuas para transformar con WoE
vars_continuas <- c("Age", "Haemoglobin", "Platelet Count", "PDW", "WBC Count")
# 1. Crear los bins WoE
bins <- woebin(dt = datos, y = "Dengue Diagnosis", x = vars_continuas)
# 2. Aplicar WoE a una copia y mantener el orden original
woe_transformado <- woebin_ply(dt = datos, bins = bins)
# Extraer solo columnas _woe
woe_solo <- select(woe_transformado, ends_with("_woe"))
# Unir sin perder filas ni columnas
datos_woe <- bind_cols(datos, woe_solo)
datos_woe
#View(datos_woe)
# Asegurar que las variables categóricas están como factores
datos_woe$Sex <- as.factor(datos_woe$Sex)
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
Sex +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Calcular el BIC
#BIC(modelo_completo)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar nuevamente el modelo sin NA
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Ver el modelo final
summary(modelo_step)
# Número de observaciones del modelo
n_obs <- nrow(model.frame(modelo_logit_sin_woe))
# Búsqueda de modelo óptimo usando BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(n_obs))
# Ver resumen del modelo final por BIC
summary(modelo_step_bic)
# Confirmar el BIC del modelo final
BIC(modelo_step_bic)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
set.seed(123)  # Para que sea reproducible
#Partir datos en 70% training y 30% testing
n <- nrow(datos_modelo)
idx_train <- sample(1:n, size = 0.7 * n)
train <- datos_modelo[idx_train, ]
test  <- datos_modelo[-idx_train, ]
# Ajustar el modelo solo con el conjunto de training
modelo_logit_final <- glm(`Dengue Diagnosis` ~ Age_woe + `Platelet Count_woe`,
data = train,
family = binomial)
# Predecir probabilidades en el conjunto de testing
prob_test <- predict(modelo_logit_final, newdata = test, type = "response")
# Convertir a clases predichas (umbral 0.5)
pred_test <- ifelse(prob_test > 0.5, 1, 0)
# Evaluar con matriz de confusión
library(caret)
confusionMatrix(as.factor(pred_test), as.factor(test$`Dengue Diagnosis`))
# 6. AUC y curva ROC
library(pROC)
roc_obj <- roc(test$`Dengue Diagnosis`, prob_test)
plot(roc_obj, col = "blue", main = "Curva ROC - Modelo Final")
auc(roc_obj)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar nuevamente el modelo sin NA
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Aplicar selección automática
modelo_step <- step(modelo_logit_sin_woe, direction = "both")
# Ver el modelo final
#summary(modelo_step)
