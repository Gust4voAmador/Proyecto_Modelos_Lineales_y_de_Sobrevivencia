method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Ajuste del modelo
modelo <- train(
DengueFactor ~ `WBC Count`,
data = train_data,
method = "glm",
metric = "ROC",
trControl = ctrl
)
# Predicción
pred_probs <- predict(modelo, newdata = test_data, type = "prob")
pred_clase <- predict(modelo, newdata = test_data)
# AUC
auc <- roc(response = test_data$DengueFactor,
predictor = pred_probs[,"Sí"],
levels = c("No", "Sí"))$auc
# Matriz de confusión y métricas
cm <- confusionMatrix(pred_clase, test_data$DengueFactor, positive = "Sí")
metricas <- rbind(metricas, data.frame(
Repeticion = i,
AUC = auc,
Accuracy = cm$overall["Accuracy"],
Sensibilidad = cm$byClass["Sensitivity"],
Especificidad = cm$byClass["Specificity"],
F1 = cm$byClass["F1"],
Precision = cm$byClass["Precision"]
))
}
# Ver resumen
summary(metricas)
datos_woe <- read_csv("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/I-2025/Modelos lineales y de sobrevivencia/Proyecto Modelos/data/datos_woe.csv")
datos_woe
#View(datos_woe)
# Asegurar que las variables categóricas están como factores
datos_woe$`Differential Count` <- as.factor(datos_woe$`Differential Count`)
datos_woe$`RBC PANEL` <- as.factor(datos_woe$`RBC PANEL`)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin + Haemoglobin_woe +
`Platelet Count` + `Platelet Count_woe` +
PDW + PDW_woe +
`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar el modelo (recordar que no considera los NA)
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` + `WBC Count`+
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Selección con BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(nrow(datos_modelo)))
summary(modelo_step_bic)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW +
#`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Ahora quitando las variables woe con valor p de 1, excepto edad_woe
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe +
Haemoglobin +
#`Platelet Count` + `Platelet Count_woe` +
PDW +
`WBC Count` +
`Differential Count` +
`RBC PANEL`,
data = datos_woe,
family = binomial)
summary(modelo_logit_sin_woe)
# Filtrar filas completas (sin NA en variables relevantes)
variables_modelo <- c("Dengue Diagnosis",
"Age", "Age_woe", "Haemoglobin",
"Platelet Count", "Platelet Count_woe",
"PDW", "Differential Count", "RBC PANEL")
datos_modelo <- datos_woe[complete.cases(datos_woe[, variables_modelo]), ]
# Ajustar el modelo (recordar que no considera los NA)
modelo_logit_sin_woe <- glm(`Dengue Diagnosis` ~
Age + Age_woe + Haemoglobin +
`Platelet Count` + `Platelet Count_woe` +
PDW + `Differential Count` + `RBC PANEL`,
data = datos_modelo,
family = binomial)
# Selección con BIC
modelo_step_bic <- step(modelo_logit_sin_woe, direction = "both", k = log(nrow(datos_modelo)))
summary(modelo_step_bic)
model_logit_final <- glm(formula = `Dengue Diagnosis` ~ Age_woe +
`Platelet Count_woe`, family = binomial, data = datos_modelo)
summary(model_logit_final)
set.seed(187)
library(caret)
library(pROC)
# la variable debe respuesta es un factor con clase positiva definida
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Control de validación cruzada clásica (5 folds)
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Entrenar modelo
modelo_cv_clasico <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = datos_modelo,
method = "glm",
metric = "ROC",
trControl = ctrl
)
print(modelo_cv_clasico)
# Promedio de AUC en los 5 folds
mean(modelo_cv_clasico$resample$ROC)
set.seed(187)
# Crear la variable de clase en el dataset correcto
datos$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Eliminar NAs si existen en las columnas relevantes
datos_filtrado <- datos %>%
select(DengueFactor, `Platelet Count`) %>%
na.omit()
# Control para validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Entrenar el modelo con Platelet Count (sin WoE)
modelo_cv_clasico_plat <- train(
DengueFactor ~ `Platelet Count`,
data = datos_filtrado,
method = "glm",
metric = "ROC",
trControl = ctrl
)
print(modelo_cv_clasico_plat)
# AUC promedio en 5 folds
mean(modelo_cv_clasico_plat$resample$ROC)
set.seed(187)
# Asegurar niveles correctos (No = 0, Sí = 1)
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Conjuntos de entrenamiento
train_props <- c(0.7, 0.5, 0.3, 0.1)
# Repeticiones por proporción de conjunto de training
reps <- 10
# validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE
)
# Inicializar para guardar resultados
resultados_estratificados <- data.frame()
for (p in train_props) {
for (i in 1:reps) {
# Partición estratificada (sin balanceo)
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = p, list = FALSE)
datos_train <- datos_modelo[idx_train, ]
datos_test <- datos_modelo[-idx_train, ]
# Entrenar el modelo directamente sobre el conjunto estratificado (no balanceado)
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = datos_train,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
# Predicciones en conjunto de prueba
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
# Calcular AUC en test
auc_test <- roc(response = datos_test$DengueFactor,
predictor = pred_test$Sí,
levels = c("No", "Sí"))$auc
# Guardar resultado
resultados_estratificados <- rbind(resultados_estratificados,
data.frame(TamanoEntrenamiento = round(p * 100),
Repeticion = i,
AUC_Test = auc_test))
}
}
# Ver resultados
print(resultados_estratificados)
resumen_estratificados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_estratificados, FUN = mean)
print(resumen_estratificados)
set.seed(187)
# Asegurar niveles correctos: "No" (sin dengue), "Sí" (con dengue)
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
train_props <- c(0.7, 0.5, 0.3, 0.1)
reps <- 10
# Control validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Inicializar
resultados_balanceados <- data.frame()
for (p in train_props) {
for (i in 1:reps) {
# Estratificación del conjunto de entrenamiento
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = p, list = FALSE)
datos_train <- datos_modelo[idx_train, ]
datos_test <- datos_modelo[-idx_train, ]
# Balancear clases en el conjunto de entrenamiento con upSample()
datos_train_balanceado <- upSample(
x = datos_train[, c("Age_woe", "Platelet Count_woe")],
y = datos_train$DengueFactor,
yname = "DengueFactor"
)
# Entrenar modelo logístico
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = datos_train_balanceado,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
# Predicción sobre conjunto de prueba (no balanceado)
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
# Calcular AUC
auc_test <- roc(response = datos_test$DengueFactor,
predictor = pred_test$Sí,
levels = c("No", "Sí"))$auc
# Guardar resultados
resultados_balanceados <- rbind(resultados_balanceados,
data.frame(TamanoEntrenamiento = round(p * 100),
Repeticion = i,
AUC_Test = auc_test))
}
}
# Mostrar tablas resultados
print(resultados_balanceados)
resumen_balanceados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_balanceados, FUN = mean)
print(resumen_balanceados)
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(stats)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
#View(datos)
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
datos
set.seed(187)
# Crear la variable de clase en el dataset correcto
datos$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Eliminar NAs si existen en las columnas relevantes
datos_filtrado <- datos %>%
select(DengueFactor, `Platelet Count`) %>%
na.omit()
# Control para validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Entrenar el modelo con Platelet Count (sin WoE)
modelo_cv_clasico_plat <- train(
DengueFactor ~ `Platelet Count`,
data = datos_filtrado,
method = "glm",
metric = "ROC",
trControl = ctrl
)
print(modelo_cv_clasico_plat)
# AUC promedio en 5 folds
mean(modelo_cv_clasico_plat$resample$ROC)
set.seed(187)
# Crear variable binaria
datos$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Filtrar columnas necesarias y eliminar NA
datos_filtrado <- datos %>%
select(DengueFactor, `Platelet Count`) %>%
na.omit()
# Proporciones del conjunto de entrenamiento
train_props <- c(0.7, 0.5, 0.3, 0.1)
reps <- 10
# Control de validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE
)
# Guardar resultados
resultados_estratificados <- data.frame()
for (p in train_props) {
for (i in 1:reps) {
idx_train <- createDataPartition(datos_filtrado$DengueFactor, p = p, list = FALSE)
datos_train <- datos_filtrado[idx_train, ]
datos_test <- datos_filtrado[-idx_train, ]
modelo <- train(
DengueFactor ~ `Platelet Count`,
data = datos_train,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
auc_test <- roc(response = datos_test$DengueFactor,
predictor = pred_test$Sí,
levels = c("No", "Sí"))$auc
resultados_estratificados <- rbind(resultados_estratificados,
data.frame(
TamanoEntrenamiento = round(p * 100),
Repeticion = i,
AUC_Test = auc_test
)
)
}
}
# Ver resultados
print(resultados_estratificados)
resumen_estratificados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_estratificados, FUN = mean)
print(resumen_estratificados)
set.seed(187)
# Definir variable binaria en el dataset correcto
datos$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Filtrar columnas necesarias y eliminar NA
datos_filtrado <- datos %>%
select(DengueFactor, `Platelet Count`) %>%
na.omit()
# Repeticiones
reps <- 100
porcentaje_entrenamiento <- 0.3
# Inicializar almacenamiento
metricas <- data.frame()
for (i in 1:reps) {
# Partición estratificada (30% para entrenamiento)
idx_train <- createDataPartition(datos_filtrado$DengueFactor, p = porcentaje_entrenamiento, list = FALSE)
train_data <- datos_filtrado[idx_train, ]
test_data <- datos_filtrado[-idx_train, ]
# Control de CV estratificada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Ajuste de modelo logístico
modelo <- train(
DengueFactor ~ `Platelet Count`,
data = train_data,
method = "glm",
metric = "ROC",
trControl = ctrl
)
# Predicción en conjunto de prueba
pred_probs <- predict(modelo, newdata = test_data, type = "prob")
pred_clase <- predict(modelo, newdata = test_data)
# Calcular AUC y métricas
auc <- roc(response = test_data$DengueFactor,
predictor = pred_probs$Sí,
levels = c("No", "Sí"))$auc
cm <- confusionMatrix(pred_clase, test_data$DengueFactor, positive = "Sí")
metricas <- rbind(metricas, data.frame(
Repeticion = i,
AUC = auc,
Accuracy = cm$overall["Accuracy"],
Sensibilidad = cm$byClass["Sensitivity"],
Especificidad = cm$byClass["Specificity"],
F1 = cm$byClass["F1"],
Precision = cm$byClass["Precision"]
))
}
# Mostrar resumen de métricas
summary(metricas)
set.seed(187)
# Crear la variable de clase como factor binario
datos$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Filtrar columnas necesarias y eliminar NA
datos_filtrado <- datos %>%
select(DengueFactor, `WBC Count`) %>%
na.omit()
# Control para validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Entrenar el modelo con WBC Count como predictor
modelo_cv_clasico_wbc <- train(
DengueFactor ~ `WBC Count`,
data = datos_filtrado,
method = "glm",
metric = "ROC",
trControl = ctrl
)
# Imprimir resultados
print(modelo_cv_clasico_wbc)
# AUC promedio en los 5 folds
mean(modelo_cv_clasico_wbc$resample$ROC)
set.seed(187)
# Crear variable binaria
datos$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Filtrar columnas necesarias y eliminar NA
datos_filtrado <- datos %>%
select(DengueFactor, `WBC Count`) %>%
na.omit()
# Proporciones del conjunto de entrenamiento
train_props <- c(0.7, 0.5, 0.3, 0.1)
reps <- 10
# Control de validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE
)
# Guardar resultados
resultados_estratificados <- data.frame()
for (p in train_props) {
for (i in 1:reps) {
idx_train <- createDataPartition(datos_filtrado$DengueFactor, p = p, list = FALSE)
datos_train <- datos_filtrado[idx_train, ]
datos_test <- datos_filtrado[-idx_train, ]
modelo <- train(
DengueFactor ~ `WBC Count`,
data = datos_train,
method = "glm",
trControl = ctrl,
metric = "ROC"
)
pred_test <- predict(modelo, newdata = datos_test, type = "prob")
auc_test <- roc(response = datos_test$DengueFactor,
predictor = pred_test$Sí,
levels = c("No", "Sí"))$auc
resultados_estratificados <- rbind(resultados_estratificados,
data.frame(
TamanoEntrenamiento = round(p * 100),
Repeticion = i,
AUC_Test = auc_test
)
)
}
}
# Ver resultados
print(resultados_estratificados)
resumen_estratificados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_estratificados, FUN = mean)
print(resumen_estratificados)
