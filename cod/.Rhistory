Repeticion = i,
AUC_Test = auc_test))
}
}
# Mostrar tablas resultados
print(resultados_balanceados)
resumen_balanceados <- aggregate(AUC_Test ~ TamanoEntrenamiento, data = resultados_balanceados, FUN = mean)
print(resumen_balanceados)
set.seed(187)
# Variable de clase como factor binario
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Repeticiones
reps <- 30
porcentaje_entrenamiento <- 0.3
# Almacenar resultados
metricas <- data.frame()
for (i in 1:reps) {
# 1. Partición estratificada (30% para entrenar)
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = porcentaje_entrenamiento, list = FALSE)
train_data <- datos_modelo[idx_train, ]
test_data <- datos_modelo[-idx_train, ]
# 2. Control de validación cruzada estratificada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# 3. Modelo
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = train_data,
method = "glm",
metric = "ROC",
trControl = ctrl
)
# 4. Predicción sobre test externo
pred_probs <- predict(modelo, newdata = test_data, type = "prob")
pred_clase <- predict(modelo, newdata = test_data)
# 5. AUC
auc <- roc(response = test_data$DengueFactor,
predictor = pred_probs$Sí,
levels = c("No", "Sí"))$auc
# 6. Matriz de confusión y métricas
cm <- confusionMatrix(pred_clase, test_data$DengueFactor, positive = "Sí")
metricas <- rbind(metricas, data.frame(
Repeticion = i,
AUC = auc,
Accuracy = cm$overall["Accuracy"],
Sensibilidad = cm$byClass["Sensitivity"],
Especificidad = cm$byClass["Specificity"],
F1 = cm$byClass["F1"],
Precision = cm$byClass["Precision"]
))
}
# Ver resumen
print(summary(metricas))
set.seed(187)
# Variable de clase como factor binario
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Repeticiones
reps <- 100
porcentaje_entrenamiento <- 0.3
# Almacenar resultados
metricas <- data.frame()
for (i in 1:reps) {
# 1. Partición estratificada (30% para entrenar)
idx_train <- createDataPartition(datos_modelo$DengueFactor, p = porcentaje_entrenamiento, list = FALSE)
train_data <- datos_modelo[idx_train, ]
test_data <- datos_modelo[-idx_train, ]
# 2. Control de validación cruzada estratificada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# 3. Modelo
modelo <- train(
DengueFactor ~ Age_woe + `Platelet Count_woe`,
data = train_data,
method = "glm",
metric = "ROC",
trControl = ctrl
)
# 4. Predicción sobre test externo
pred_probs <- predict(modelo, newdata = test_data, type = "prob")
pred_clase <- predict(modelo, newdata = test_data)
# 5. AUC
auc <- roc(response = test_data$DengueFactor,
predictor = pred_probs$Sí,
levels = c("No", "Sí"))$auc
# 6. Matriz de confusión y métricas
cm <- confusionMatrix(pred_clase, test_data$DengueFactor, positive = "Sí")
metricas <- rbind(metricas, data.frame(
Repeticion = i,
AUC = auc,
Accuracy = cm$overall["Accuracy"],
Sensibilidad = cm$byClass["Sensitivity"],
Especificidad = cm$byClass["Specificity"],
F1 = cm$byClass["F1"],
Precision = cm$byClass["Precision"]
))
}
# Ver resumen
print(summary(metricas))
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(stats)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
#View(data_clean)
# Eliminar la observaciones nulas en Dengue Diagnosis
datos <- datos[!is.na(datos$`Dengue Diagnosis`),]
datos
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
View(data_clean)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
View(datos)
989/1003
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + `Platelet Count` + PDW +
`WBC Count` + `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + `Platelet Count` + PDW
# +`WBC Count`
+ `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + `Platelet Count` + PDW
+`WBC Count`
+ `Differential Count` + `RBC PANEL`,
data = datos_woe,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Modelo logístico con todas las variables (originales + transformadas)
modelo_wbc_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW +`WBC Count` + `Differential Count`
+ `RBC PANEL`, data = datos_woe, family = binomial)
# Ver el resumen del modelo
summary(modelo_wbc_count)
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos_woe)))  # BIC
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos_woe)))  # BIC
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + `Platelet Count` + PDW
+`WBC Count`
+ `Differential Count` + `RBC PANEL`,
data = datos,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))  # BIC
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos_woe %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos_woe %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
datos
931/1003
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(stats)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
View(datos)
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos_woe %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
datos
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + `Platelet Count` + PDW
+`WBC Count`
+ `Differential Count` + `RBC PANEL`,
data = datos,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))  # BIC
# Ajustar el modelo completo con los datos ya filtrados
modelo_wbc_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
data = datos_wbc, family = binomial)
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos_wbc)))
# Ver resultados finales
summary(modelo_step_wbc)
# Ajustar el modelo completo con los datos ya filtrados
modelo_wbc_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
data = datos, family = binomial)
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
# Ver resultados finales
summary(modelo_step_wbc)
# Ajustar el modelo completo con los datos ya filtrados
modelo_wbc_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
data = datos, family = binomial)
print(summary(modelo_wbc_count))
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
# Ver resultados finales
summary(modelo_step_wbc)
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
# Ver resultados finales
summary(modelo_step_wbc)
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
datos
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
datos
# Ajustar el modelo completo con los datos ya filtrados
modelo_wbc_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW + `Platelet Count` +
`Differential Count` + `RBC PANEL`,
data = datos, family = binomial)
print(summary(modelo_wbc_count))
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_platelet <- step(modelo_platelet_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `Platelet Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
# Ver resultados finales
summary(modelo_step_platelet)
# Ajustar el modelo completo con los datos ya filtrados
modelo_platelet_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW + `Platelet Count` +
`Differential Count` + `RBC PANEL`,
data = datos, family = binomial)
print(summary(modelo_platelet_count))
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_platelet <- step(modelo_platelet_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `Platelet Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
# Ver resultados finales
summary(modelo_step_platelet)
pepe <- step(modelo_wbc_count,
scope = list(
upper = ~ PDW + `WBC Count`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
pepe <- glm(`Dengue Diagnosis` ~
PDW + `WBC Count`,
data = datos, family = binomial)
print(summary(pepe))
pepe2 <- glm(`Dengue Diagnosis` ~
Age + `Platelet Count`,
data = datos, family = binomial)
print(summary(pepe2))
library(readr)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
library(stats)
library(pROC)
library(caret)
library(ggplot2)
library(boot)
library(scorecard)
data_raw <- read_csv("../data/Dengue diseases dataset.csv", show_col_types = FALSE)
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
#View(datos)
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
datos
# Modelo logístico con todas las variables (originales + transformadas)
modelo_logit_completo <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + `Platelet Count` + PDW
+`WBC Count`
+ `Differential Count` + `RBC PANEL`,
data = datos,
family = binomial)
# Ver el resumen del modelo
summary(modelo_logit_completo)
# Ajustar el modelo completo con los datos ya filtrados
modelo_wbc_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
data = datos, family = binomial)
print(summary(modelo_wbc_count))
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_wbc <- step(modelo_wbc_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `WBC Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
# Ver resultados finales
summary(modelo_step_wbc)
# Ajustar el modelo completo con los datos ya filtrados
modelo_platelet_count <- glm(`Dengue Diagnosis` ~
Age + Haemoglobin + PDW + `Platelet Count` +
`Differential Count` + `RBC PANEL`,
data = datos, family = binomial)
print(summary(modelo_platelet_count))
# Ejecutar step() desde el modelo completo, hacia el más simple, usando BIC
modelo_step_platelet <- step(modelo_platelet_count,
scope = list(
upper = ~ Age + Haemoglobin + PDW + `Platelet Count` +
`Differential Count` + `RBC PANEL`,
lower = ~ 1),
direction = "both",
k = log(nrow(datos)))
# Ver resultados finales
summary(modelo_step_platelet)
pepe2 <- glm(`Dengue Diagnosis` ~
Age + `Platelet Count`,
data = datos, family = binomial)
print(summary(pepe2))
#Creación de copia del df original (crudo)
datos <- data_raw
names(datos)[9] <- "Dengue Diagnosis"
# Asegurar que Dengue sea binaria
datos$`Dengue Diagnosis` <- as.numeric(as.character(datos$`Dengue Diagnosis`))
#View(datos)
# Filtrar observaciones con datos completos en todas las variables potenciales del scope
datos <- datos %>%
select(`Dengue Diagnosis`, Age, Haemoglobin, PDW, `WBC Count`,
`Differential Count`, `RBC PANEL`, `Platelet Count` ) %>%
na.omit()
datos
set.seed(187)
# la variable debe respuesta es un factor con clase positiva definida
datos_modelo$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
set.seed(187)
# Asegurarse de usar el dataset correcto
datos_modelo$DengueFactor <- factor(
ifelse(datos_modelo$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Entrenar el modelo con el dataset correcto
modelo_cv_clasico_plat <- train(
DengueFactor ~ `Platelet Count_woe`,
data = datos_modelo,
method = "glm",
metric = "ROC",
trControl = ctrl
)
print(modelo_cv_clasico_plat)
# Promedio de AUC en los 5 folds
mean(modelo_cv_clasico_plat$resample$ROC)
set.seed(187)
# Crear la variable de clase en el dataset correcto
datos$DengueFactor <- factor(
ifelse(datos$`Dengue Diagnosis` == 1, "Sí", "No"),
levels = c("No", "Sí")
)
# Eliminar NAs si existen en las columnas relevantes
datos_filtrado <- datos %>%
select(DengueFactor, `Platelet Count`) %>%
na.omit()
# Control para validación cruzada
ctrl <- trainControl(
method = "cv",
number = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Entrenar el modelo con Platelet Count (sin WoE)
modelo_cv_clasico_plat <- train(
DengueFactor ~ `Platelet Count`,
data = datos_filtrado,
method = "glm",
metric = "ROC",
trControl = ctrl
)
print(modelo_cv_clasico_plat)
# AUC promedio en 5 folds
mean(modelo_cv_clasico_plat$resample$ROC)
